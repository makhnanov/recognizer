package main

import (
	"bytes"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/go-vgo/robotgo"
	"github.com/gordonklaus/portaudio"
	"github.com/joho/godotenv"
	hook "github.com/robotn/gohook"
)

var OPENAI_API_KEY string

type WhisperResponse struct {
	Text string `json:"text"`
}

type AudioRecorder struct {
	stream      *portaudio.Stream
	outputFile  *os.File
	recording   bool
	mutex       sync.Mutex
	inputBuffer []float32
	stopChan    chan struct{}
	doneChan    chan struct{} // FIX: –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã
	dataSize    int
}

// WAV header writer
func writeWavHeader(f *os.File, dataSize int) error {
	sampleRate := 44100
	bitsPerSample := 16
	numChannels := 1

	byteRate := sampleRate * numChannels * bitsPerSample / 8
	blockAlign := numChannels * bitsPerSample / 8
	chunkSize := 36 + dataSize

	f.Seek(0, 0)
	f.Write([]byte("RIFF"))
	binary.Write(f, binary.LittleEndian, uint32(chunkSize))
	f.Write([]byte("WAVE"))

	f.Write([]byte("fmt "))
	binary.Write(f, binary.LittleEndian, uint32(16))
	binary.Write(f, binary.LittleEndian, uint16(1))
	binary.Write(f, binary.LittleEndian, uint16(numChannels))
	binary.Write(f, binary.LittleEndian, uint32(sampleRate))
	binary.Write(f, binary.LittleEndian, uint32(byteRate))
	binary.Write(f, binary.LittleEndian, uint16(blockAlign))
	binary.Write(f, binary.LittleEndian, uint16(bitsPerSample))

	f.Write([]byte("data"))
	binary.Write(f, binary.LittleEndian, uint32(dataSize))

	return nil
}

func NewAudioRecorder() *AudioRecorder {
	return &AudioRecorder{
		inputBuffer: make([]float32, 64),
	}
}

func (ar *AudioRecorder) StartRecording(filename string) error {
	ar.mutex.Lock()
	defer ar.mutex.Unlock()

	if ar.recording {
		return fmt.Errorf("already recording")
	}

	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	ar.outputFile = file
	ar.dataSize = 0
	writeWavHeader(file, 0)

	stream, err := portaudio.OpenDefaultStream(1, 0, 44100, len(ar.inputBuffer), ar.inputBuffer)
	if err != nil {
		return err
	}
	ar.stream = stream

	if err := ar.stream.Start(); err != nil {
		return err
	}

	ar.recording = true
	ar.stopChan = make(chan struct{})
	ar.doneChan = make(chan struct{}) // FIX

	go ar.recordingLoop()

	return nil
}

func (ar *AudioRecorder) StopRecording() error {
	ar.mutex.Lock()
	defer ar.mutex.Unlock()

	if !ar.recording {
		return nil
	}

	close(ar.stopChan)

	// FIX: –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã
	<-ar.doneChan

	if ar.stream != nil {
		ar.stream.Stop()
		ar.stream.Close()
		ar.stream = nil
	}

	if ar.outputFile != nil {
		writeWavHeader(ar.outputFile, ar.dataSize)
		ar.outputFile.Close()
		ar.outputFile = nil
	}

	ar.recording = false
	return nil
}

func (ar *AudioRecorder) recordingLoop() {
	defer close(ar.doneChan) // FIX: —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –≥–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

	for {
		select {
		case <-ar.stopChan:
			return
		default:
			err := ar.stream.Read()
			if err != nil {
				fmt.Printf("Error reading from stream: %v\n", err)
				return
			}
			for _, sample := range ar.inputBuffer {
				intSample := int16(sample * 32767)
				binary.Write(ar.outputFile, binary.LittleEndian, intSample)
				ar.dataSize += 2
			}
		}
	}
}

// transcribeAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ OpenAI Whisper API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
func transcribeAudio(filename string) (string, error) {
	if OPENAI_API_KEY == "YOUR_OPENAI_API_KEY_HERE" {
		return "", fmt.Errorf("OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç–µ OPENAI_API_KEY –≤ –∫–æ–¥–µ")
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
	file, err := os.Open(filename)
	if err != nil {
		return "", fmt.Errorf("failed to open audio file: %v", err)
	}
	defer file.Close()

	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	fileWriter, err := writer.CreateFormFile("file", filename)
	if err != nil {
		return "", fmt.Errorf("failed to create form file: %v", err)
	}

	_, err = io.Copy(fileWriter, file)
	if err != nil {
		return "", fmt.Errorf("failed to copy file data: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
	writer.WriteField("model", "whisper-1")

	// –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ
	writer.WriteField("language", "ru")

	writer.Close()

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", "https://api.openai.com/v1/audio/transcriptions", &buf)
	if err != nil {
		return "", fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Authorization", "Bearer "+OPENAI_API_KEY)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API error (status %d): %s", resp.StatusCode, string(body))
	}

	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var whisperResp WhisperResponse
	err = json.Unmarshal(body, &whisperResp)
	if err != nil {
		return "", fmt.Errorf("failed to parse response: %v", err)
	}

	return strings.TrimSpace(whisperResp.Text), nil
}

// copyToClipboardAndPaste –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
func copyToClipboardAndPaste(text string) error {
	if text == "" {
		return nil
	}

	// –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
	robotgo.WriteAll(text)

	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
	time.Sleep(100 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞
	clipContent, err := robotgo.ReadAll()
	if err != nil || clipContent != text {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –ø–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
		fmt.Println("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é...")
		robotgo.TypeStr(text)
		return nil
	}

	// –ï—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
	robotgo.KeyTap("v", "ctrl")

	return nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	OPENAI_API_KEY = os.Getenv("OPENAI_API_KEY")
	if OPENAI_API_KEY == "" {
		log.Fatal("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	portaudio.Initialize()
	defer portaudio.Terminate()

	// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É .voices –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if err := os.MkdirAll(".voices", 0755); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ .voices: %v\n", err)
		return
	}

	recorder := NewAudioRecorder()
	var currentFilename string

	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, os.Interrupt, syscall.SIGTERM)

	evChan := hook.Start()
	defer hook.End()

	fmt.Println("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–∂–∞—Ç—å F9 = –∑–∞–ø–∏—Å—å, –æ—Ç–ø—É—Å—Ç–∏—Ç—å F9 = —Å—Ç–æ–ø, Esc ‚Äî –≤—ã—Ö–æ–¥.")
	fmt.Println("–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Whisper API.")

loop:
	for {
		select {
		case ev := <-evChan:
			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ F9 (Rawcode 65478)
			if ev.Kind == hook.KeyDown && ev.Rawcode == 65478 { // F9
				if !recorder.recording {
					timestamp := time.Now().Format("2006-01-02_15-04-05")
					currentFilename = fmt.Sprintf(".voices/voice_recording_%s.wav", timestamp)
					fmt.Println("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏:", currentFilename)
					if err := recorder.StartRecording(currentFilename); err != nil {
						fmt.Println("–û—à–∏–±–∫–∞:", err)
					}
				}
			}
			if ev.Kind == hook.KeyUp && ev.Rawcode == 65478 { // F9
				if recorder.recording {
					fmt.Println("‚èπ –°—Ç–æ–ø –∑–∞–ø–∏—Å–∏")
					if err := recorder.StopRecording(); err != nil {
						fmt.Println("–û—à–∏–±–∫–∞:", err)
					} else if currentFilename != "" {
						// –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
						fmt.Println("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
						text, err := transcribeAudio(currentFilename)
						if err != nil {
							fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: %v\n", err)
						} else {
							fmt.Printf("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"%s\"\n", text)

							// –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
							fmt.Println("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞...")
							if copyErr := copyToClipboardAndPaste(text); copyErr != nil {
								fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏: %v\n", copyErr)
							} else {
								fmt.Println("‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏ –≤—Å—Ç–∞–≤–ª–µ–Ω!")
							}
						}
					}
				}
			}
			//if ev.Kind == hook.KeyDown && ev.Keycode == 1 { // Esc
			//	fmt.Println("–í—ã—Ö–æ–¥")
			//	break loop
			//}
		case <-sigs:
			break loop
		}
	}
}
